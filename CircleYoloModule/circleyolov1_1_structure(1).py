# -*- coding: utf-8 -*-
"""CircleYOLOv1_structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E0ehbtvSkqF_D2LRnk9YIZdaP53eTSKw
"""

from torch import nn
from torch.nn.modules.activation import LeakyReLU
from torch.nn.modules.dropout import Dropout

class Yolo(nn.Module):
  """ Class to sequential Yolo v1 model structure """
  def __init__(self, input_shape: int = 3, num_class: int = 1, segmentation_stride: int = 7, num_bbox: int = 3):
    super().__init__()
    self.num_class = num_class
    self.segmentation_stride = segmentation_stride
    self.num_bbox = num_bbox
    self.block_Yolo_v1 = nn.Sequential(
      nn.Conv2d(in_channels=input_shape, out_channels=64, kernel_size=(7,7),stride=2, padding=3, bias=False),
      nn.BatchNorm2d(64),
      nn.LeakyReLU(0.1),
        #nn.MaxPool2d(kernel_size=(2,2),stride=2, padding=0),
      nn.Conv2d(in_channels=64, out_channels=64,kernel_size=(3,3),stride=2, padding=1, bias=False),

      nn.Conv2d(in_channels=64, out_channels=192,kernel_size=(3,3),stride=1, padding=1, bias=False),
      nn.BatchNorm2d(192),
      nn.LeakyReLU(0.1),
      #nn.MaxPool2d(kernel_size=(2,2),stride=2, padding=0),
      nn.Conv2d(in_channels=192, out_channels=192,kernel_size=(3,3),stride=2, padding=1, bias=False),

      nn.Conv2d(in_channels=192, out_channels=128,kernel_size=(1,1),stride=1, padding=0, bias=False),
      nn.BatchNorm2d(128),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256, out_channels=256, kernel_size=(1,1),stride=1, padding=0, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256,out_channels=512, kernel_size=(3,3),stride=1, padding=1, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      #nn.MaxPool2d(kernel_size=(2,2), stride=2,padding=0),
      nn.Conv2d(in_channels=512, out_channels=512,kernel_size=(3,3),stride=2, padding=1, bias=False),

      nn.Conv2d(in_channels=512, out_channels=256,kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256, out_channels=512,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512, out_channels=256,kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256, out_channels=512,kernel_size=(3,3),stride=1, padding=1, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512, out_channels=256,kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256, out_channels=512,kernel_size=(3,3),stride=1, padding=1, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512, out_channels=256, kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(256),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=256, out_channels=512, kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512, out_channels=512,kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512,out_channels=1024,kernel_size=(3,3),stride=1, padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      #nn.MaxPool2d(kernel_size=(2,2), stride=2, padding=0),
      nn.Conv2d(in_channels=1024, out_channels=1024,kernel_size=(3,3),stride=2, padding=1, bias=False),

      nn.Conv2d(in_channels=1024,out_channels=512,kernel_size=(1,1),stride=1, padding=0, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512,out_channels=1024,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=(1,1),stride=1,padding=0, bias=False),
      nn.BatchNorm2d(512),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=512, out_channels=1024,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=1024, out_channels=1024,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=1024, out_channels=1024,kernel_size=(3,3),stride=2,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=1024,out_channels=1024,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),
      nn.Conv2d(in_channels=1024, out_channels=1024,kernel_size=(3,3),stride=1,padding=1, bias=False),
      nn.BatchNorm2d(1024),
      nn.LeakyReLU(0.1),

      #nn.Flatten(), # 7x7x1024 -> 50176
      #nn.Dropout(0.3),
      #nn.LeakyReLU(0.1),
      #nn.Linear(1024 * segmentation_stride**2, segmentation_stride**2 * (num_class + num_bbox * 4)), # 50176 -> 588
      #nn.LeakyReLU(0.1),
      #nn.Linear(segmentation_stride**2 * (num_class + num_bbox * 4), segmentation_stride**2 * (num_class + num_bbox * 4)), # 588 -> stride**2*(class + bbox * 4)
      #nn.LeakyReLU(0.1)

      nn.Dropout(0.3),
      nn.Conv2d(in_channels=1024, out_channels=(num_class + num_bbox * 4),kernel_size=(3,3),stride=1,padding=1, bias=True),
      nn.Conv2d(in_channels=(num_class + num_bbox * 4), out_channels=(num_class + num_bbox * 4) ,kernel_size=(1,1),stride=1,padding=0, bias=True),
      nn.Flatten()
    )

  def forward(self, x):
    return self.block_Yolo_v1(x).reshape(x.shape[0], self.num_class + self.num_bbox * 4, self.segmentation_stride, self.segmentation_stride).permute(0,2,3,1)